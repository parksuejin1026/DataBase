# 📖 Chapter 05: 데이터 검색과 그루핑 (SELECT, WHERE, GROUP BY)

## 🎯 학습 목표
* [cite_start]**SQL 문의 표준**과 **`SELECT... FROM`** 문의 기본 형식을 이해합니다[cite: 2897, 2909].
* [cite_start]**`WHERE` 절**을 사용한 조건 검색 및 다양한 **연산자**를 학습합니다[cite: 3347, 3356].
* [cite_start]**`GROUP BY`**와 **집계 함수**를 활용하여 데이터를 그룹별로 요약하고, **`HAVING` 절**을 사용한 그룹 필터링을 익힙니다[cite: 3572, 3639, 3680].

---

## 📝 데이터 검색의 기본 (SELECT 문)

### 1. SELECT 문의 형식
* [cite_start]SQL은 데이터베이스의 공통 언어이며, MySQL을 비롯한 대부분의 DBMS는 **ANSI-92/99 SQL 표준**을 준수합니다[cite: 2898, 2900].
* **기본 형식:**
    ```sql
    SELECT 열이름      -- 조회할 열 지정
    FROM 테이블이름    -- 대상 테이블 지정
    WHERE 조건        -- 필터링 조건 (선택 사항)
    [cite_start]``` [cite: 2912, 2913, 2914]
* [cite_start]**사용할 데이터베이스 지정:** `USE 데이터베이스이름;` (예: `USE employees;`) [cite: 2918, 2920]

### 2. 데이터 조회 (`SELECT... FROM`)
* [cite_start]**모든 열 조회:** `SELECT * FROM 테이블이름;` [cite: 2959]
* [cite_start]**특정 열 조회:** `SELECT 열1, 열2 FROM 테이블이름;` (쉼표로 구분) [cite: 3021, 3022]
* [cite_start]**데이터베이스 지정:** 현재 `employees` DB가 선택되어 있다면, `SELECT * FROM employees.titles;` 와 `SELECT * FROM titles;`는 동일합니다[cite: 3067, 3068].

---

## 🔎 조건 검색 및 정렬 (WHERE, ORDER BY, LIMIT)

### 1. WHERE 절 (조건 필터링)
[cite_start]`SELECT ... FROM` 문에 `WHERE` 절을 추가하여 **특정 조건을 만족하는 데이터만** 조회합니다[cite: 3347, 3348].

| 연산자 | 설명 | 예시 (cookDB) |
| :--- | :--- | :--- |
| **AND / OR** | [cite_start]논리 연산자로 조건을 결합합니다[cite: 3357, 3358]. | `WHERE birthYear >= 1970 AND height >= 182;` |
| **BETWEEN A AND B** | [cite_start]A 이상 B 이하의 범위에 속하는 값을 조회합니다 (>= A AND <= B 와 동일)[cite: 3365, 3366]. | `WHERE height BETWEEN 180 AND 182;` |
| **IN (값 목록)** | [cite_start]이산적인 값 목록 중 하나와 일치하는 값을 조회합니다 (`= ANY`와 동일)[cite: 3369, 3370, 3410]. | `WHERE addr IN ('경남', '충남', '경북');` |
| **LIKE '패턴'** | [cite_start]문자열의 패턴 검색에 사용됩니다[cite: 3371]. | `WHERE userName LIKE '김%';` (김씨 성 조회) |

### 2. 서브쿼리 및 ANY, ALL 연산자
* [cite_start]**서브쿼리(Subquery)**: `SELECT` 문 안에 또 다른 `SELECT` 문을 넣어 결과를 조건으로 활용합니다[cite: 3381].
    * [cite_start]**오류 발생**: 서브쿼리가 **1개 이상의 행**을 반환할 때 단일 값 비교(`>`, `=`)를 시도하면 오류가 발생합니다 (`Error Code: 1242`)[cite: 3391].
* [cite_start]**ANY**: 서브쿼리의 결과 중 **어느 하나**라도 조건을 만족하면 참입니다[cite: 3395, 3397].
* [cite_start]**ALL**: 서브쿼리의 결과 **모두** 조건을 만족해야 참입니다[cite: 3400].

### 3. ORDER BY, DISTINCT, LIMIT
| 구문 | 역할 |
| :--- | :--- |
| **ORDER BY** | 조회 결과를 특정 열을 기준으로 **정렬**합니다. 기본은 **오름차순(`ASC`)**이며, **내림차순(`DESC`)**을 지정할 수 있습니다. [cite_start]정렬 기준을 여러 개 설정할 수 있습니다[cite: 3415, 3418, 3421]. |
| **DISTINCT** | [cite_start]조회 결과에서 **중복된 행을 제거**하고 유일한 값만 출력합니다[cite: 3432, 3433]. |
| **LIMIT** | 조회 결과의 행 수를 **제한**합니다. [cite_start]`LIMIT 개수` 또는 `LIMIT 시작, 개수` 형식으로 사용합니다[cite: 3449, 3450, 3505]. |

---

## 📊 데이터 그루핑 및 요약 (GROUP BY, HAVING)

### 1. GROUP BY 절과 집계 함수
* [cite_start]**GROUP BY**: 특정 열의 값(예: `userID`)이 **같은 행끼리 묶어서** 그룹을 만듭니다[cite: 3617, 3618].
* [cite_start]**집계 함수 (Aggregate Functions)**: 그룹으로 묶인 데이터에 대해 계산을 수행합니다[cite: 3628, 3630].
    * [cite_start]`SUM()`: 합계를 구합니다[cite: 3617].
    * [cite_start]`AVG()`: 평균을 구합니다[cite: 3632].
    * [cite_start]`MIN() / MAX()`: 최솟값 / 최댓값을 구합니다[cite: 3642].
    * `COUNT(*)`: 행의 개수를 셉니다. [cite_start]`COUNT(열이름)`은 **NULL이 아닌** 행만 셉니다[cite: 3655, 3656, 3657].
* [cite_start]**별칭 (Alias)**: `AS '새로운 이름'`을 사용하여 조회된 열의 이름을 이해하기 쉽게 변경합니다[cite: 3620, 3621].

### 2. HAVING 절 (그룹 필터링)
* [cite_start]`WHERE` 절은 일반 행에 조건을 걸지만, **`HAVING` 절은 `GROUP BY`로 묶인 그룹에 조건을 걸 때** 사용됩니다[cite: 3661].
* [cite_start]**오류 발생**: `WHERE` 절에서 `SUM()`과 같은 **집계 함수의 결과**를 바로 사용할 수 없습니다 (`Error Code: 1111`)[cite: 3670, 3676].
* [cite_start]**사용 예시**: 총 구매액이 1000 이상인 **그룹**만 조회[cite: 3669, 3684].
    ```sql
    SELECT userID, SUM(price * amount) AS '총구매액'
    FROM buyTBL GROUP BY userID
    HAVING SUM(price * amount) > 1000;
    ```

### 3. WITH ROLLUP 절
* [cite_start]**`WITH ROLLUP`**: `GROUP BY`의 결과를 바탕으로 **소합계(Subtotal)**와 **총합계(Grand Total)**를 함께 출력합니다[cite: 3691, 3692, 3697].
